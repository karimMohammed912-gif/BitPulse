# This file contains the fastlane.tools configuration
require 'dotenv'
require 'yaml'
Dotenv.load(File.expand_path('../../.env', __dir__))
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Distribute app to Firebase App Distribution"
  lane :firebase_distribute do
    # Avoid 'clean' because antivirus/OS may lock files on Windows
    gradle(task: "assembleRelease")

    # Read version from pubspec.yaml (e.g., 1.2.3+45)
    pubspec_path = File.expand_path('../../pubspec.yaml', __dir__)
    version_str = nil
    begin
      pubspec = YAML.load_file(pubspec_path)
      version_str = pubspec['version'] if pubspec && pubspec['version']
    rescue => e
      UI.message("[firebase] Could not read version from pubspec.yaml: #{e}")
    end
    version_str ||= ENV['FLUTTER_BUILD_NAME'] || 'unknown'
    notes = "BitPulse v#{version_str}"

    # Resolve APK path dynamically (from android/fastlane to project root is ../../)
    project_root = File.expand_path('../..', __dir__)
    candidates = Dir.glob([
      File.join(project_root, 'build', '**', 'outputs', '**', '*.apk'),
      File.join(project_root, 'build', 'app', 'outputs', 'flutter-apk', '*.apk'),
    ]).select { |p| File.file?(p) }

    if candidates.empty?
      UI.user_error!("No APKs found under #{File.join(project_root, 'build')}. Run 'flutter build apk --release' first.")
    end

    # Prefer a universal release APK if present
    preferred = candidates.find { |p| File.basename(p) =~ /app-release(?:-unsigned)?\.apk$/ }
    apk_abs_path = preferred || candidates.max_by { |p| File.size(p) }

    firebase_app_distribution(
      app: "1:953262432976:android:e4bee7bc51470e6ecd74d5",
      # Use absolute path to avoid Windows relative path issues
      apk_path: apk_abs_path,
      testers: ENV['Email_addres'] || "",
      release_notes: notes
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
